{"version":3,"file":"pathOperations.js","sourceRoot":"","sources":["../../../../../src/generated/src/operationsInterfaces/pathOperations.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport {\n  PathCreateOptionalParams,\n  PathCreateResponse,\n  PathUpdateAction,\n  PathSetAccessControlRecursiveMode,\n  PathUpdateOptionalParams,\n  PathUpdateResponse,\n  PathLeaseAction,\n  PathLeaseOptionalParams,\n  PathLeaseResponse,\n  PathReadOptionalParams,\n  PathReadResponse,\n  PathGetPropertiesOptionalParams,\n  PathGetPropertiesResponse,\n  PathDeleteOptionalParams,\n  PathDeleteResponse,\n  PathSetAccessControlOptionalParams,\n  PathSetAccessControlResponse,\n  PathSetAccessControlRecursiveOptionalParams,\n  PathSetAccessControlRecursiveResponse,\n  PathFlushDataOptionalParams,\n  PathFlushDataResponse,\n  PathAppendDataOptionalParams,\n  PathAppendDataResponse,\n  PathExpiryOptions,\n  PathSetExpiryOptionalParams,\n  PathSetExpiryResponse,\n  PathUndeleteOptionalParams,\n  PathUndeleteResponse\n} from \"../models/index.js\";\n\n/** Interface representing a PathOperations. */\nexport interface PathOperations {\n  /**\n   * Create or rename a file or directory.    By default, the destination is overwritten and if the\n   * destination already exists and has a lease the lease is broken.  This operation supports conditional\n   * HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   *  To fail if the destination already exists, use a conditional request with If-None-Match: \"*\".\n   * @param options The options parameters.\n   */\n  create(options?: PathCreateOptionalParams): Promise<PathCreateResponse>;\n  /**\n   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets\n   * properties for a file or directory, or sets access control for a file or directory. Data can only be\n   * appended to a file. Concurrent writes to the same file using multiple clients are not supported.\n   * This operation supports conditional HTTP requests. For more information, see [Specifying Conditional\n   * Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param action The action must be \"append\" to upload data to be appended to a file, \"flush\" to flush\n   *               previously uploaded data to a file, \"setProperties\" to set the properties of a file or directory,\n   *               \"setAccessControl\" to set the owner, group, permissions, or access control list for a file or\n   *               directory, or  \"setAccessControlRecursive\" to set the access control list for a directory\n   *               recursively. Note that Hierarchical Namespace must be enabled for the account in order to use access\n   *               control.  Also note that the Access Control List (ACL) includes permissions for the owner, owning\n   *               group, and others, so the x-ms-permissions and x-ms-acl request headers are mutually exclusive.\n   * @param mode Mode \"set\" sets POSIX access control rights on files and directories, \"modify\" modifies\n   *             one or more POSIX access control rights  that pre-exist on files and directories, \"remove\" removes\n   *             one or more POSIX access control rights  that were present earlier on files and directories\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  update(\n    action: PathUpdateAction,\n    mode: PathSetAccessControlRecursiveMode,\n    body: coreRestPipeline.RequestBodyType,\n    options?: PathUpdateOptionalParams\n  ): Promise<PathUpdateResponse>;\n  /**\n   * Create and manage a lease to restrict write and delete access to the path. This operation supports\n   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob\n   * Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param xMsLeaseAction There are five lease actions: \"acquire\", \"break\", \"change\", \"renew\", and\n   *                       \"release\". Use \"acquire\" and specify the \"x-ms-proposed-lease-id\" and \"x-ms-lease-duration\" to\n   *                       acquire a new lease. Use \"break\" to break an existing lease. When a lease is broken, the lease break\n   *                       period is allowed to elapse, during which time no lease operation except break and release can be\n   *                       performed on the file. When a lease is successfully broken, the response indicates the interval in\n   *                       seconds until a new lease can be acquired. Use \"change\" and specify the current lease ID in\n   *                       \"x-ms-lease-id\" and the new lease ID in \"x-ms-proposed-lease-id\" to change the lease ID of an active\n   *                       lease. Use \"renew\" and specify the \"x-ms-lease-id\" to renew an existing lease. Use \"release\" and\n   *                       specify the \"x-ms-lease-id\" to release a lease.\n   * @param options The options parameters.\n   */\n  lease(\n    xMsLeaseAction: PathLeaseAction,\n    options?: PathLeaseOptionalParams\n  ): Promise<PathLeaseResponse>;\n  /**\n   * Read the contents of a file.  For read operations, range requests are supported. This operation\n   * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for\n   * Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  read(options?: PathReadOptionalParams): Promise<PathReadResponse>;\n  /**\n   * Get Properties returns all system and user defined properties for a path. Get Status returns all\n   * system defined properties for a path. Get Access Control List returns the access control list for a\n   * path. This operation supports conditional HTTP requests.  For more information, see [Specifying\n   * Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: PathGetPropertiesOptionalParams\n  ): Promise<PathGetPropertiesResponse>;\n  /**\n   * Delete the file or directory. This operation supports conditional HTTP requests.  For more\n   * information, see [Specifying Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  delete(options?: PathDeleteOptionalParams): Promise<PathDeleteResponse>;\n  /**\n   * Set the owner, group, permissions, or access control list for a path.\n   * @param options The options parameters.\n   */\n  setAccessControl(\n    options?: PathSetAccessControlOptionalParams\n  ): Promise<PathSetAccessControlResponse>;\n  /**\n   * Set the access control list for a path and sub-paths.\n   * @param mode Mode \"set\" sets POSIX access control rights on files and directories, \"modify\" modifies\n   *             one or more POSIX access control rights  that pre-exist on files and directories, \"remove\" removes\n   *             one or more POSIX access control rights  that were present earlier on files and directories\n   * @param options The options parameters.\n   */\n  setAccessControlRecursive(\n    mode: PathSetAccessControlRecursiveMode,\n    options?: PathSetAccessControlRecursiveOptionalParams\n  ): Promise<PathSetAccessControlRecursiveResponse>;\n  /**\n   * Set the owner, group, permissions, or access control list for a path.\n   * @param options The options parameters.\n   */\n  flushData(\n    options?: PathFlushDataOptionalParams\n  ): Promise<PathFlushDataResponse>;\n  /**\n   * Append data to the file.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  appendData(\n    body: coreRestPipeline.RequestBodyType,\n    options?: PathAppendDataOptionalParams\n  ): Promise<PathAppendDataResponse>;\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(\n    expiryOptions: PathExpiryOptions,\n    options?: PathSetExpiryOptionalParams\n  ): Promise<PathSetExpiryResponse>;\n  /**\n   * Undelete a path that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(options?: PathUndeleteOptionalParams): Promise<PathUndeleteResponse>;\n}\n"]}
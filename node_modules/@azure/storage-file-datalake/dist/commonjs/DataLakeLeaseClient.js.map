{"version":3,"file":"DataLakeLeaseClient.js","sourceRoot":"","sources":["../../src/DataLakeLeaseClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC,mDAAmD;AAEnD,MAAa,mBAAmB;IASD;IAR7B,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED,IAAW,GAAG;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;IACzB,CAAC;IAED,YAA6B,MAAuB;QAAvB,WAAM,GAAN,MAAM,CAAiB;IAAG,CAAC;IAEjD,KAAK,CAAC,YAAY,CACvB,QAAgB,EAChB,UAAiC,EAAE;QAEnC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,kCAAkC,EAClC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC5D,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,WAAW,CACtB,eAAuB,EACvB,UAAiC,EAAE;QAEnC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,iCAAiC,EACjC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;QAClE,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,UAAiC,EAAE;QAC3D,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,kCAAkC,EAClC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAClD,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,UAAiC,EAAE;QACzD,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAChD,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,UAAU,CACrB,WAAmB,EACnB,UAAiC,EAAE;QAEnC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAC9C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAC7D,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AA1ED,kDA0EC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { BlobLeaseClient } from \"@azure/storage-blob\";\nimport type { Lease, LeaseOperationOptions, LeaseOperationResponse } from \"./models.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\n\nexport class DataLakeLeaseClient {\n  public get leaseId(): string {\n    return this.client.leaseId;\n  }\n\n  public get url(): string {\n    return this.client.url;\n  }\n\n  constructor(private readonly client: BlobLeaseClient) {}\n\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {},\n  ): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    return tracingClient.withSpan(\n      \"DataLakeLeaseClient-acquireLease\",\n      options,\n      async (updatedOptions) => {\n        return this.client.acquireLease(duration, updatedOptions);\n      },\n    );\n  }\n\n  public async changeLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {},\n  ): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    return tracingClient.withSpan(\n      \"DataLakeLeaseClient-changeLease\",\n      options,\n      async (updatedOptions) => {\n        return this.client.changeLease(proposedLeaseId, updatedOptions);\n      },\n    );\n  }\n\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    return tracingClient.withSpan(\n      \"DataLakeLeaseClient-releaseLease\",\n      options,\n      async (updatedOptions) => {\n        return this.client.releaseLease(updatedOptions);\n      },\n    );\n  }\n\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    options.conditions = options.conditions || {};\n    return tracingClient.withSpan(\n      \"DataLakeLeaseClient-renewLease\",\n      options,\n      async (updatedOptions) => {\n        return this.client.renewLease(updatedOptions);\n      },\n    );\n  }\n\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {},\n  ): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    return tracingClient.withSpan(\n      \"DataLakeLeaseClient-renewLease\",\n      options,\n      async (updatedOptions) => {\n        return this.client.breakLease(breakPeriod, updatedOptions);\n      },\n    );\n  }\n}\n"]}
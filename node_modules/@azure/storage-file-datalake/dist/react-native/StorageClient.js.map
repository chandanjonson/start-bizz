{"version":3,"file":"StorageClient.js","sourceRoot":"","sources":["../../src/StorageClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAIjE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACtE,OAAO,EACL,aAAa,EACb,qBAAqB,EACrB,YAAY,EACZ,MAAM,GACP,MAAM,yBAAyB,CAAC;AAYjC,0FAA0F;AAC1F,SAAS,oBAAoB,CAAC,QAAkB;IAC9C,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,WAAW,EAAE,GAAG,QAAQ,CAAC,OAAiC,CAAC;IAC5F,MAAM,UAAU,GAAgB,QAAgB,CAAC,eAAe,CAAC;IACjE,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;IAC/E,CAAC;IAED,MAAM,YAAY,GAAkB,QAAgB,CAAC,aAAa,CAAC;IACnE,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IACD,OAAO;QACL,GAAG,WAAW;QACd,uBAAuB,EAAE,IAAI;QAC7B,UAAU;QACV,QAAQ,EAAE,YAAY;KACvB,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,OAAgB,aAAa;IACjC;;OAEG;IACa,GAAG,CAAS;IAEZ,WAAW,CAAS;IAEpC;;OAEG;IACgB,eAAe,CAAS;IAE3C;;OAEG;IACgB,cAAc,CAAS;IAE1C;;;;OAIG;IACgB,QAAQ,CAAW;IAEtC;;OAEG;IACa,UAAU,CAAqE;IAE/F;;;OAGG;IACgB,oBAAoB,CAAuB;IAE9D;;;OAGG;IACgB,kCAAkC,CAAuB;IAE5E;OACG;IACgB,OAAO,CAAU;IAEpC;;;;OAIG;IACH,YAAsB,GAAW,EAAE,QAAsB;QACvD,iFAAiF;QACjF,IAAI,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,qGAAqG;QACrG,MAAM,UAAU,GAAG,IAAI,iBAAiB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAClD,IAAI,CAAC,cAAc,EACnB,oBAAoB,CAAC,QAAQ,CAAC,CAC/B,CAAC;QAEF,IAAI,CAAC,kCAAkC,GAAG,IAAI,oBAAoB,CAChE,IAAI,CAAC,eAAe,EACpB,oBAAoB,CAAC,QAAQ,CAAC,CAC/B,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QAE7D,IAAI,CAAC,UAAU,GAAI,UAAkB,CAAC,UAAU,CAAC;QAEjD,iDAAiD;QACjD,MAAM,oBAAoB,GAAG,IAAI,CAAC,oBAA2B,CAAC;QAC9D,oBAAoB,CAAC,kBAAkB,GAAG,SAAS,CAAC;QACpD,MAAM,oCAAoC,GAAG,IAAI,CAAC,kCAAyC,CAAC;QAC5F,oCAAoC,CAAC,kBAAkB,GAAG,SAAS,CAAC;IACtE,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { StorageContextClient } from \"./StorageContextClient.js\";\nimport type { StorageClient as StorageClientContext } from \"./generated/src/index.js\";\nimport type { Pipeline, PipelineLike, StoragePipelineOptions } from \"./Pipeline.js\";\nimport type { AnonymousCredential } from \"@azure/storage-blob\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\nimport type { StorageSharedKeyCredential } from \"@azure/storage-blob\";\nimport { toBlobEndpointUrl, toDfsEndpointUrl } from \"./transforms.js\";\nimport {\n  escapeURLPath,\n  getAccountNameFromUrl,\n  getURLScheme,\n  iEqual,\n} from \"./utils/utils.common.js\";\nimport type { ExtendedServiceClientOptions } from \"@azure/core-http-compat\";\nimport type { HttpClient, Pipeline as CorePipeline } from \"@azure/core-rest-pipeline\";\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  tracingOptions?: OperationTracingOptions;\n}\n\n// This function relies on the Pipeline already being initialized by a storage-blob client\nfunction getCoreClientOptions(pipeline: Pipeline): ExtendedServiceClientOptions {\n  const { httpClient: v1Client, ...restOptions } = pipeline.options as StoragePipelineOptions;\n  const httpClient: HttpClient = (pipeline as any)._coreHttpClient;\n  if (!httpClient) {\n    throw new Error(\"Pipeline not correctly initialized; missing V2 HttpClient\");\n  }\n\n  const corePipeline: CorePipeline = (pipeline as any)._corePipeline;\n  if (!corePipeline) {\n    throw new Error(\"Pipeline not correctly initialized; missing V2 Pipeline\");\n  }\n  return {\n    ...restOptions,\n    allowInsecureConnection: true,\n    httpClient,\n    pipeline: corePipeline,\n  };\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n\n  public readonly accountName: string;\n\n  /**\n   * Encoded URL string value for corresponding blob endpoint.\n   */\n  protected readonly blobEndpointUrl: string;\n\n  /**\n   * Encoded URL string value for corresponding dfs endpoint.\n   */\n  protected readonly dfsEndpointUrl: string;\n\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: Pipeline;\n\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n\n  /**\n   * storageClientContextWithBlobEndpoint is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator, with its url pointing to the Blob endpoint.\n   */\n  protected readonly storageClientContextToBlobEndpoint: StorageClientContext;\n\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: PipelineLike) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.blobEndpointUrl = toBlobEndpointUrl(this.url);\n    this.dfsEndpointUrl = toDfsEndpointUrl(this.url);\n    this.accountName = getAccountNameFromUrl(this.blobEndpointUrl);\n    this.pipeline = pipeline;\n    // creating this BlobServiceClient allows us to use the converted V2 Pipeline attached to `pipeline`.\n    const blobClient = new BlobServiceClient(url, pipeline);\n    this.storageClientContext = new StorageContextClient(\n      this.dfsEndpointUrl,\n      getCoreClientOptions(pipeline),\n    );\n\n    this.storageClientContextToBlobEndpoint = new StorageContextClient(\n      this.blobEndpointUrl,\n      getCoreClientOptions(pipeline),\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = (blobClient as any).credential;\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n    const storageClientContextWithBlobEndpoint = this.storageClientContextToBlobEndpoint as any;\n    storageClientContextWithBlobEndpoint.requestContentType = undefined;\n  }\n}\n"]}
{"version":3,"file":"DataLakeServiceClient.js","sourceRoot":"","sources":["../../src/DataLakeServiceClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAM9C,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAC1D,OAAO,EAAE,0BAA0B,EAAE,MAAM,6CAA6C,CAAC;AACzF,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AASzE,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EACL,eAAe,EACf,gBAAgB,EAChB,4BAA4B,GAC7B,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,gBAAgB,EAAE,sCAAsC,EAAE,MAAM,iBAAiB,CAAC;AAK3F,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AACvE,OAAO,EACL,iCAAiC,EACjC,yCAAyC,GAC1C,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AAGjE;;;;GAIG;AACH,MAAM,OAAO,qBAAsB,SAAQ,aAAa;IACtD,mCAAmC;IAEnC;;OAEG;IACK,iBAAiB,CAAoB;IAE7C;;;;;;;;;;;OAWG;IACH,2FAA2F;IAEpF,MAAM,CAAC,oBAAoB,CAChC,gBAAwB;IACxB,2FAA2F;IAC3F,iEAAiE;IACjE,OAAgC;QAEhC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,cAAc,GAAG,4BAA4B,CAAC,gBAAgB,CAAC,CAAC;QACtE,IAAI,cAAc,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;YAChD,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,mBAAmB,GAAG,IAAI,0BAA0B,CACxD,cAAc,CAAC,WAAY,EAC3B,cAAc,CAAC,UAAU,CAC1B,CAAC;gBACF,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;oBAC1B,OAAO,CAAC,YAAY,GAAG,uBAAuB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAC1E,CAAC;gBACD,MAAM,QAAQ,GAAG,WAAW,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;gBAC3D,OAAO,IAAI,qBAAqB,CAAC,gBAAgB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;YACnF,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;YACxF,CAAC;QACH,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,eAAe,EAAE,CAAC;YACnD,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,mBAAmB,EAAE,EAAE,OAAO,CAAC,CAAC;YACjE,OAAO,IAAI,qBAAqB,CAC9B,gBAAgB,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,cAAc,CAAC,UAAU,EACtE,QAAQ,CACT,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CACb,0FAA0F,CAC3F,CAAC;QACJ,CAAC;IACH,CAAC;IA8BD,YACE,GAAW,EACX,oBAIY;IACZ,2FAA2F;IAC3F,iEAAiE;IACjE,OAAgC;QAEhC,IAAI,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACzC,KAAK,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,IAAI,UAAU,CAAC;YACf,IAAI,oBAAoB,KAAK,SAAS,EAAE,CAAC;gBACvC,UAAU,GAAG,IAAI,mBAAmB,EAAE,CAAC;YACzC,CAAC;iBAAM,CAAC;gBACN,UAAU,GAAG,oBAAoB,CAAC;YACpC,CAAC;YAED,MAAM,QAAQ,GAAG,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAClD,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACvB,CAAC;QAED,gEAAgE;QAChE,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtF,CAAC;IAED;;;;OAIG;IACH,2FAA2F;IAC3F,oEAAoE;IAC7D,mBAAmB,CAAC,cAAsB;QAC/C,OAAO,IAAI,wBAAwB,CACjC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,EAC7D,IAAI,CAAC,QAAQ,CACd,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA8CG;IACI,KAAK,CAAC,oBAAoB,CAC/B,QAAc,EACd,SAAe,EACf,UAA8C,EAAE;QAEhD,OAAO,aAAa,CAAC,QAAQ,CAC3B,4CAA4C,EAC5C,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;QAC1F,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2GG;IACI,eAAe,CACpB,UAAyC,EAAE;QAE3C,OAAO,sCAAsC,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IAChG,CAAC;IAED,uEAAuE;IACvE,mCAAmC;IACnC,IAAI;IAEJ,gGAAgG;IAChG,mCAAmC;IACnC,IAAI;IAEJ;;;;;;;;;;;;;OAaG;IACI,qBAAqB,CAC1B,SAAgB,EAChB,cAAqC,qBAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,EACrE,gBAAwB,KAAK,EAC7B,UAA+C,EAAE;QAEjD,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,YAAY,0BAA0B,CAAC,EAAE,CAAC;YAC7D,MAAM,UAAU,CACd,+FAA+F,CAChG,CAAC;QACJ,CAAC;QAED,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;YAC5B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,GAAG,GAAG,iCAAiC,CAC3C;YACE,WAAW;YACX,SAAS;YACT,aAAa;YACb,QAAQ,EAAE,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE;YAClD,GAAG,OAAO;SACX,EACD,IAAI,CAAC,UAAU,CAChB,CAAC,QAAQ,EAAE,CAAC;QAEb,OAAO,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACzC,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,uBAAuB,CAC5B,SAAgB,EAChB,cAAqC,qBAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,EACrE,gBAAwB,KAAK,EAC7B,UAA+C,EAAE;QAEjD,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,YAAY,0BAA0B,CAAC,EAAE,CAAC;YAC7D,MAAM,UAAU,CACd,+FAA+F,CAChG,CAAC;QACJ,CAAC;QAED,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;YAC5B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QACpD,CAAC;QAED,OAAO,yCAAyC,CAC9C;YACE,WAAW;YACX,SAAS;YACT,aAAa;YACb,QAAQ,EAAE,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE;YAClD,GAAG,OAAO;SACX,EACD,IAAI,CAAC,UAAU,CAChB,CAAC,YAAY,CAAC;IACjB,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,kBAAkB,CAC7B,qBAA6B,EAC7B,uBAA+B,EAC/B,UAA4C,EAAE;QAK9C,OAAO,aAAa,CAAC,QAAQ,CAC3B,0CAA0C,EAC1C,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CACxD,qBAAqB,EACrB,uBAAuB,EACvB;gBACE,GAAG,OAAO;gBACV,wBAAwB,EAAE,OAAO,CAAC,yBAAyB;gBAC3D,cAAc,EAAE,cAAc,CAAC,cAAc;aAC9C,CACF,CAAC;YAEF,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAC/C,OAAO,CAAC,yBAAyB,IAAI,qBAAqB,CAC3D,CAAC;YACF,OAAO;gBACL,gBAAgB;gBAChB,0BAA0B,EAAE,GAAG,CAAC,yBAAyB;aAC1D,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,aAAa,CACxB,UAAuC,EAAE;QAEzC,OAAO,aAAa,CAAC,QAAQ,CAC3B,qCAAqC,EACrC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC;gBAC1C,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;aAC9C,CAAC,CAAC;QACL,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,aAAa,CACxB,UAAqC,EACrC,UAAuC,EAAE;QAEzC,OAAO,aAAa,CAAC,QAAQ,CAC3B,qCAAqC,EACrC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,UAAU,EAAE;gBACtD,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;aAC9C,CAAC,CAAC;QACL,CAAC,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { getDefaultProxySettings } from \"@azure/core-rest-pipeline\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport type {\n  ServiceGetPropertiesOptions,\n  ServiceSetPropertiesOptions,\n  ServiceSetPropertiesResponse,\n} from \"@azure/storage-blob\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\nimport type { Pipeline, StoragePipelineOptions } from \"./Pipeline.js\";\nimport { isPipelineLike, newPipeline } from \"./Pipeline.js\";\nimport { AnonymousCredential } from \"@azure/storage-blob\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential.js\";\nimport { DataLakeFileSystemClient } from \"./DataLakeFileSystemClient.js\";\nimport type {\n  FileSystemItem,\n  ServiceGenerateAccountSasUrlOptions,\n  ServiceListFileSystemsOptions,\n  ServiceListFileSystemsSegmentResponse,\n  ServiceUndeleteFileSystemOptions,\n  FileSystemUndeleteResponse,\n} from \"./models.js\";\nimport { StorageClient } from \"./StorageClient.js\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  extractConnectionStringParts,\n} from \"./utils/utils.common.js\";\nimport { toDfsEndpointUrl, toFileSystemPagedAsyncIterableIterator } from \"./transforms.js\";\nimport type {\n  ServiceGetUserDelegationKeyOptions,\n  ServiceGetUserDelegationKeyResponse,\n} from \"./models.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions.js\";\nimport {\n  generateAccountSASQueryParameters,\n  generateAccountSASQueryParametersInternal,\n} from \"./sas/AccountSASSignatureValues.js\";\nimport { AccountSASServices } from \"./sas/AccountSASServices.js\";\nimport type { DataLakeServiceGetPropertiesResponse, DataLakeServiceProperties } from \"./index.js\";\n\n/**\n * DataLakeServiceClient allows you to manipulate Azure\n * Data Lake service resources and file systems. The storage account provides\n * the top-level namespace for the Data Lake service.\n */\nexport class DataLakeServiceClient extends StorageClient {\n  // private serviceContext: Service;\n\n  /**\n   * blobServiceClient provided by `@azure/storage-blob` package.\n   */\n  private blobServiceClient: BlobServiceClient;\n\n  /**\n   *\n   * Creates an instance of DataLakeServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n\n  public static fromConnectionString(\n    connectionString: string,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n  ): DataLakeServiceClient {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNodeLike) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey,\n        );\n        if (!options.proxyOptions) {\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        }\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new DataLakeServiceClient(toDfsEndpointUrl(extractedCreds.url), pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new DataLakeServiceClient(\n        toDfsEndpointUrl(extractedCreds.url) + \"?\" + extractedCreds.accountSas,\n        pipeline,\n      );\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\",\n      );\n    }\n  }\n\n  /**\n   * Creates an instance of DataLakeServiceClient from url.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake service, such as\n   *                     \"https://myaccount.dfs.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n  );\n\n  /**\n   * Creates an instance of DataLakeServiceClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake service, such as\n   *                     \"https://myaccount.dfs.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  public constructor(url: string, pipeline: Pipeline);\n\n  public constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n  ) {\n    if (isPipelineLike(credentialOrPipeline)) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    }\n\n    // this.serviceContext = new Service(this.storageClientContext);\n    this.blobServiceClient = new BlobServiceClient(this.blobEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Creates a {@link DataLakeFileSystemClient} object.\n   *\n   * @param fileSystemName - File system name.\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getFileSystemClient(fileSystemName: string): DataLakeFileSystemClient {\n    return new DataLakeFileSystemClient(\n      appendToURLPath(this.url, encodeURIComponent(fileSystemName)),\n      this.pipeline,\n    );\n  }\n\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Data Lake service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @example\n   * ```ts snippet:DatalakeServiceClientGetUserDelegationKey\n   * import {\n   *   DataLakeServiceClient,\n   *   generateDataLakeSASQueryParameters,\n   *   FileSystemSASPermissions,\n   *   SASProtocol,\n   * } from \"@azure/storage-file-datalake\";\n   *\n   * const account = \"<account>\";\n   * const sas = \"<sas token>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net${sas}`,\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const accountName = \"<account name>\";\n   * const startsOn = new Date();\n   * const expiresOn = new Date(+new Date() + 86400 * 1000);\n   * // Generate user delegation SAS for a file system\n   * const userDelegationKey = await datalakeServiceClient.getUserDelegationKey(startsOn, expiresOn);\n   * const fileSystemSAS = generateDataLakeSASQueryParameters(\n   *   {\n   *     fileSystemName, // Required\n   *     permissions: FileSystemSASPermissions.parse(\"racwdl\"), // Required\n   *     startsOn, // Required. Date type\n   *     expiresOn, // Optional. Date type\n   *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n   *     protocol: SASProtocol.HttpsAndHttp, // Optional\n   *     version: \"2018-11-09\", // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n   *   },\n   *   userDelegationKey, // UserDelegationKey\n   *   accountName,\n   * ).toString();\n   * ```\n   * @see https://learn.microsoft.com/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param startsOn - The start time for the user delegation SAS. Must be within 7 days of the current time.\n   * @param expiresOn - The end time for the user delegation SAS. Must be within 7 days of the current time.\n   * @param options -\n   */\n  public async getUserDelegationKey(\n    startsOn: Date,\n    expiresOn: Date,\n    options: ServiceGetUserDelegationKeyOptions = {},\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeServiceClient-getUserDelegationKey\",\n      options,\n      async (updatedOptions) => {\n        return this.blobServiceClient.getUserDelegationKey(startsOn, expiresOn, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the file systems\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the file systems in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```ts snippet:ReadmeSampleListFileSystems\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * let i = 1;\n   * const fileSystems = datalakeServiceClient.listFileSystems();\n   * for await (const fileSystem of fileSystems) {\n   *   console.log(`File system ${i++}: ${fileSystem.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```ts snippet:ReadmeSampleListFileSystems_Iterator\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * let i = 1;\n   * const fileSystems = datalakeServiceClient.listFileSystems();\n   * let { value, done } = await fileSystems.next();\n   * while (!done) {\n   *   console.log(`File system ${i++}: ${value.name}`);\n   *   ({ value, done } = await fileSystems.next());\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```ts snippet:ReadmeSampleListFileSystems_ByPage\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * let i = 1;\n   * for await (const response of datalakeServiceClient.listFileSystems().byPage({ maxPageSize: 20 })) {\n   *   if (response.fileSystemItems) {\n   *     for (const fileSystem of response.fileSystemItems) {\n   *       console.log(`File System ${i++}: ${fileSystem.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```ts snippet:ReadmeSampleListFileSystems_Continuation\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * let i = 1;\n   * let fileSystems = datalakeServiceClient.listFileSystems().byPage({ maxPageSize: 2 });\n   * let response = (await fileSystems.next()).value;\n   * // Prints 2 file systems\n   * if (response.fileSystemItems) {\n   *   for (const fileSystem of response.fileSystemItems) {\n   *     console.log(`File system ${i++}: ${fileSystem.name}`);\n   *   }\n   * }\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * fileSystems = datalakeServiceClient\n   *   .listFileSystems()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await fileSystems.next()).value;\n   * // Prints 10 file systems\n   * if (response.fileSystemItems) {\n   *   for (const fileSystem of response.fileSystemItems) {\n   *     console.log(`File system ${i++}: ${fileSystem.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/list-containers2\n   *\n   * @param options -\n   */\n  public listFileSystems(\n    options: ServiceListFileSystemsOptions = {},\n  ): PagedAsyncIterableIterator<FileSystemItem, ServiceListFileSystemsSegmentResponse> {\n    return toFileSystemPagedAsyncIterableIterator(this.blobServiceClient.listContainers(options));\n  }\n\n  // public async createFileSystem(): Promise<DataLakeFileSystemClient> {\n  //   throw Error(\"NotImplemented\");\n  // }\n\n  // public async deleteFileSystem(fileSystem: string): Promise<ServiceDeleteFileSystemResponse> {\n  //   throw Error(\"NotImplemented\");\n  // }\n\n  /**\n   * Only available for DataLakeServiceClient constructed with a shared key credential.\n   *\n   * Generates an account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not specified.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateAccountSasUrl(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {},\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\",\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    const sas = generateAccountSASQueryParameters(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"b\").toString(),\n        ...options,\n      },\n      this.credential,\n    ).toString();\n\n    return appendToURLQuery(this.url, sas);\n  }\n\n  /**\n   * Only available for DataLakeServiceClient constructed with a shared key credential.\n   *\n   * Generates string to sign for an account Shared Access Signature (SAS) based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not specified.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasStringToSign(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {},\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\",\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    return generateAccountSASQueryParametersInternal(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"b\").toString(),\n        ...options,\n      },\n      this.credential,\n    ).stringToSign;\n  }\n\n  /**\n   * Restore a previously deleted File System.\n   * This API is only functional if Container Soft Delete is enabled for the storage account.\n   *\n   * @param deletedFileSystemName - The name of the source File System.\n   * @param deleteFileSystemVersion - The new name of the File System.\n   * @param options - Options to configure File System Restore operation.\n   */\n  public async undeleteFileSystem(\n    deletedFileSystemName: string,\n    deleteFileSystemVersion: string,\n    options: ServiceUndeleteFileSystemOptions = {},\n  ): Promise<{\n    fileSystemClient: DataLakeFileSystemClient;\n    fileSystemUndeleteResponse: FileSystemUndeleteResponse;\n  }> {\n    return tracingClient.withSpan(\n      \"DataLakeServiceClient-undeleteFileSystem\",\n      options,\n      async (updatedOptions) => {\n        const res = await this.blobServiceClient.undeleteContainer(\n          deletedFileSystemName,\n          deleteFileSystemVersion,\n          {\n            ...options,\n            destinationContainerName: options.destinationFileSystemName,\n            tracingOptions: updatedOptions.tracingOptions,\n          },\n        );\n\n        const fileSystemClient = this.getFileSystemClient(\n          options.destinationFileSystemName || deletedFileSystemName,\n        );\n        return {\n          fileSystemClient,\n          fileSystemUndeleteResponse: res.containerUndeleteResponse,\n        };\n      },\n    );\n  }\n\n  /**\n   * Gets the properties of a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://learn.microsoft.com/rest/api/storageservices/get-blob-service-properties\n   *\n   * @param options - Options to the Service Get Properties operation.\n   * @returns Response data for the Service Get Properties operation.\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {},\n  ): Promise<DataLakeServiceGetPropertiesResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeServiceClient-getProperties\",\n      options,\n      async (updatedOptions) => {\n        return this.blobServiceClient.getProperties({\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n      },\n    );\n  }\n\n  /**\n   * Sets properties for a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://learn.microsoft.com/rest/api/storageservices/set-blob-service-properties\n   *\n   * @param properties -\n   * @param options - Options to the Service Set Properties operation.\n   * @returns Response data for the Service Set Properties operation.\n   */\n  public async setProperties(\n    properties: DataLakeServiceProperties,\n    options: ServiceSetPropertiesOptions = {},\n  ): Promise<ServiceSetPropertiesResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeServiceClient-setProperties\",\n      options,\n      async (updatedOptions) => {\n        return this.blobServiceClient.setProperties(properties, {\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n      },\n    );\n  }\n}\n"]}
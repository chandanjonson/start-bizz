{"version":3,"file":"DataLakeFileSystemClient.js","sourceRoot":"","sources":["../../src/DataLakeFileSystemClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { ContainerClient } from \"@azure/storage-blob\";\nimport type { Pipeline, StoragePipelineOptions } from \"./Pipeline.js\";\nimport { isPipelineLike, newPipeline } from \"./Pipeline.js\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential.js\";\nimport { AnonymousCredential } from \"@azure/storage-blob\";\nimport { DataLakeLeaseClient } from \"./DataLakeLeaseClient.js\";\nimport { FileSystemOperationsImpl as FileSystem } from \"./generated/src/operations/index.js\";\nimport type {\n  AccessPolicy,\n  FileSystemCreateOptions,\n  FileSystemCreateResponse,\n  FileSystemDeleteOptions,\n  FileSystemDeleteResponse,\n  FileSystemExistsOptions,\n  FileSystemGetAccessPolicyOptions,\n  FileSystemGetAccessPolicyResponse,\n  FileSystemGetPropertiesOptions,\n  FileSystemGetPropertiesResponse,\n  FileSystemSetAccessPolicyOptions,\n  FileSystemSetAccessPolicyResponse,\n  FileSystemSetMetadataOptions,\n  FileSystemSetMetadataResponse,\n  ListPathsOptions,\n  ListPathsSegmentOptions,\n  Metadata,\n  Path,\n  PublicAccessType,\n  SignedIdentifier,\n  FileSystemListPathsResponse,\n  FileSystemCreateIfNotExistsResponse,\n  FileSystemDeleteIfExistsResponse,\n  FileSystemGenerateSasUrlOptions,\n  FileSystemListDeletedPathsResponse,\n  ListDeletedPathsOptions,\n  DeletedPath,\n  FileSystemUndeletePathResponse,\n  FileSystemUndeletePathOption,\n  ListDeletedPathsSegmentOptions,\n  PathUndeleteHeaders,\n  UserDelegationKey,\n} from \"./models.js\";\nimport { StorageClient } from \"./StorageClient.js\";\nimport { toContainerPublicAccessType, toPublicAccessType, toPermissions } from \"./transforms.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  assertResponse,\n  EscapePath,\n  windowsFileTimeTicksToTime,\n} from \"./utils/utils.common.js\";\nimport { DataLakeFileClient, DataLakeDirectoryClient } from \"./clients.js\";\nimport {\n  generateDataLakeSASQueryParameters,\n  generateDataLakeSASQueryParametersInternal,\n} from \"./sas/DataLakeSASSignatureValues.js\";\nimport { DeletionIdKey, PathResultTypeConstants } from \"./utils/constants.js\";\nimport { PathClientInternal } from \"./utils/PathClientInternal.js\";\n\n/**\n * A DataLakeFileSystemClient represents a URL to the Azure Storage file system\n * allowing you to manipulate its directories and files.\n */\nexport class DataLakeFileSystemClient extends StorageClient {\n  /**\n   * fileSystemContext provided by protocol layer.\n   */\n  private fileSystemContext: FileSystem;\n\n  /**\n   * fileSystemContext provided by protocol layer.\n   */\n  private fileSystemContextToBlobEndpoint: FileSystem;\n\n  /**\n   * blobContainerClient provided by `@azure/storage-blob` package.\n   */\n  private blobContainerClient: ContainerClient;\n\n  /**\n   * Creates an instance of DataLakeFileSystemClient from url and credential.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file system, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n  );\n\n  /**\n   * Creates an instance of DataLakeFileSystemClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file system, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: Pipeline);\n\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n  ) {\n    if (isPipelineLike(credentialOrPipeline)) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    }\n\n    this.fileSystemContext = new FileSystem(this.storageClientContext);\n    this.fileSystemContextToBlobEndpoint = new FileSystem(this.storageClientContextToBlobEndpoint);\n    this.blobContainerClient = new ContainerClient(this.blobEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Name of current file system.\n   *\n   * @readonly\n   */\n  public get name(): string {\n    return this.blobContainerClient.containerName;\n  }\n\n  /**\n   * Creates a {@link DataLakeDirectoryClient} object under current file system.\n   *\n   * @param directoryName -\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getDirectoryClient(directoryName: string): DataLakeDirectoryClient {\n    return new DataLakeDirectoryClient(\n      appendToURLPath(this.url, EscapePath(directoryName)),\n      this.pipeline,\n    );\n  }\n\n  /**\n   * Creates a {@link DataLakeFileClient} object under current file system.\n   *\n   * @param fileName -\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getFileClient(fileName: string): DataLakeFileClient {\n    return new DataLakeFileClient(appendToURLPath(this.url, EscapePath(fileName)), this.pipeline);\n  }\n\n  /**\n   * Get a {@link DataLakeLeaseClient} that manages leases on the file system.\n   *\n   * @param proposeLeaseId - Optional. Initial proposed lease Id.\n   */\n  public getDataLakeLeaseClient(proposeLeaseId?: string): DataLakeLeaseClient {\n    return new DataLakeLeaseClient(this.blobContainerClient.getBlobLeaseClient(proposeLeaseId));\n  }\n\n  /**\n   * Creates a new file system under the specified account. If the file system with\n   * the same name already exists, the operation fails.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/create-container\n   *\n   * @param options - Optional. Options when creating file system.\n   */\n  public async create(options: FileSystemCreateOptions = {}): Promise<FileSystemCreateResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-create\",\n      options,\n      async (updatedOptions) => {\n        return this.blobContainerClient.create({\n          ...options,\n          access: toContainerPublicAccessType(options.access),\n          tracingOptions: updatedOptions.tracingOptions,\n          containerEncryptionScope: options.fileSystemEncryptionScope,\n        });\n      },\n    );\n  }\n\n  /**\n   * Creates a new file system under the specified account. If the file system with\n   * the same name already exists, it is not changed.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/create-container\n   *\n   * @param options -\n   */\n  public async createIfNotExists(\n    options: FileSystemCreateOptions = {},\n  ): Promise<FileSystemCreateIfNotExistsResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-createIfNotExists\",\n      options,\n      async (updatedOptions) => {\n        return this.blobContainerClient.createIfNotExists({\n          ...options,\n          access: toContainerPublicAccessType(options.access),\n          containerEncryptionScope: options.fileSystemEncryptionScope,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n      },\n    );\n  }\n\n  /**\n   * Returns true if the File system represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing file system might be deleted by other clients or\n   * applications. Vice versa new file system with the same name might be added by other clients or\n   * applications after this function completes.\n   *\n   * @param options -\n   */\n  public async exists(options: FileSystemExistsOptions = {}): Promise<boolean> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-exists\",\n      options,\n      async (updatedOptions) => {\n        return this.blobContainerClient.exists(updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Delete current file system.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/delete-container\n   *\n   * @param options - Optional. Options when deleting file system.\n   */\n  public async delete(options: FileSystemDeleteOptions = {}): Promise<FileSystemDeleteResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-delete\",\n      options,\n      async (updatedOptions) => {\n        return this.blobContainerClient.delete({\n          ...options,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n      },\n    );\n  }\n\n  /**\n   * Delete current file system if it exists.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/delete-container\n   *\n   * @param options -\n   */\n  public async deleteIfExists(\n    options: FileSystemDeleteOptions = {},\n  ): Promise<FileSystemDeleteIfExistsResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-deleteIfExists\",\n      options,\n      async (updatedOptions) => {\n        return this.blobContainerClient.deleteIfExists(updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * file system.\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listFileSystems` method of {@link DataLakeServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/get-container-properties\n   *\n   * @param options - Optional. Options when getting file system properties.\n   */\n  public async getProperties(\n    options: FileSystemGetPropertiesOptions = {},\n  ): Promise<FileSystemGetPropertiesResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-getProperties\",\n      options,\n      async (updatedOptions) => {\n        const rawResponse = await this.blobContainerClient.getProperties({\n          ...options,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n\n        // Transfer and rename blobPublicAccess to publicAccess\n        const response = rawResponse as FileSystemGetPropertiesResponse;\n\n        response.publicAccess = toPublicAccessType(rawResponse.blobPublicAccess);\n        response._response.parsedHeaders.publicAccess = response.publicAccess;\n\n        delete rawResponse.blobPublicAccess;\n        delete rawResponse._response.parsedHeaders.blobPublicAccess;\n\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified file system.\n   *\n   * If no option provided, or no metadata defined in the parameter, the file system\n   * metadata will be removed.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/set-container-metadata\n   *\n   * @param metadata - Replace existing metadata with this value.\n   *                              If no value provided the existing metadata will be removed.\n   * @param options - Optional. Options when setting file system metadata.\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: FileSystemSetMetadataOptions = {},\n  ): Promise<FileSystemSetMetadataResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-setMetadata\",\n      options,\n      async (updatedOptions) => {\n        return this.blobContainerClient.setMetadata(metadata, {\n          ...options,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n      },\n    );\n  }\n\n  /**\n   * Gets the permissions for the specified file system. The permissions indicate\n   * whether file system data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/get-container-acl\n   *\n   * @param options - Optional. Options when getting file system access policy.\n   */\n  public async getAccessPolicy(\n    options: FileSystemGetAccessPolicyOptions = {},\n  ): Promise<FileSystemGetAccessPolicyResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-getAccessPolicy\",\n      options,\n      async (updatedOptions) => {\n        const rawResponse = await this.blobContainerClient.getAccessPolicy({\n          ...options,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n\n        // Transfer and rename blobPublicAccess to publicAccess\n        const response = rawResponse as unknown as FileSystemGetAccessPolicyResponse;\n\n        response.publicAccess = toPublicAccessType(rawResponse.blobPublicAccess);\n        response._response.parsedHeaders.publicAccess = response.publicAccess;\n\n        delete rawResponse.blobPublicAccess;\n        delete rawResponse._response.parsedHeaders.blobPublicAccess;\n\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Sets the permissions for the specified file system. The permissions indicate\n   * whether directories or files in a file system may be accessed publicly.\n   *\n   * When you set permissions for a file system, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing file system ACL will be\n   * removed.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/set-container-acl\n   *\n   * @param access - Optional. The level of public access to data in the file system.\n   * @param fileSystemAcl - Optional. Array of elements each having a unique Id and details of the access policy.\n   * @param options - Optional. Options when setting file system access policy.\n   */\n  public async setAccessPolicy(\n    access?: PublicAccessType,\n    fileSystemAcl?: SignedIdentifier<AccessPolicy>[],\n    options: FileSystemSetAccessPolicyOptions = {},\n  ): Promise<FileSystemSetAccessPolicyResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-setAccessPolicy\",\n      options,\n      async (updatedOptions) => {\n        return this.blobContainerClient.setAccessPolicy(\n          toContainerPublicAccessType(access),\n          fileSystemAcl,\n          {\n            ...options,\n            tracingOptions: updatedOptions.tracingOptions,\n          },\n        );\n      },\n    );\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the paths (directories and files)\n   * under the specified file system.\n   *\n   * .byPage() returns an async iterable iterator to list the paths in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```ts snippet:ReadmeSampleListPaths\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * const paths = fileSystemClient.listPaths();\n   * for await (const path of paths) {\n   *   console.log(`Path ${i++}: ${path.name}, is directory: ${path.isDirectory}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```ts snippet:ReadmeSampleListPaths_Iterator\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * const paths = fileSystemClient.listPaths();\n   * let { value, done } = await paths.next();\n   * while (!done) {\n   *   console.log(`Path ${i++}: ${value.name}, is directory: ${value.isDirectory}`);\n   *   ({ value, done } = await paths.next());\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```ts snippet:ReadmeSampleListPaths_ByPage\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * for await (const response of fileSystemClient.listPaths().byPage({ maxPageSize: 20 })) {\n   *   if (response.pathItems) {\n   *     for (const path of response.pathItems) {\n   *       console.log(`Path ${i++}: ${path.name}, is directory: ${path.isDirectory}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```ts snippet:ReadmeSampleListPaths_Continuation\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * let paths = fileSystemClient.listPaths().byPage({ maxPageSize: 2 });\n   * let response = (await paths.next()).value;\n   * // Prints 2 paths\n   * if (response.pathItems) {\n   *   for (const path of response.pathItems) {\n   *     console.log(`Path ${i++}: ${path.name}, is directory: ${path.isDirectory}`);\n   *   }\n   * }\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * paths = fileSystemClient.listPaths().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await paths.next()).value;\n   * // Prints 10 paths\n   * if (response.pathItems) {\n   *   for (const path of response.pathItems) {\n   *     console.log(`Path ${i++}: ${path.name}, is directory: ${path.isDirectory}`);\n   *   }\n   * }\n   * ```\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param options - Optional. Options when listing paths.\n   */\n  public listPaths(\n    options: ListPathsOptions = {},\n  ): PagedAsyncIterableIterator<Path, FileSystemListPathsResponse> {\n    options.path = options.path === \"\" ? undefined : options.path;\n\n    const iter = this.listItems(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  private async *listItems(options: ListPathsSegmentOptions = {}): AsyncIterableIterator<Path> {\n    for await (const response of this.listSegments(undefined, options)) {\n      yield* response.pathItems || [];\n    }\n  }\n\n  private async *listSegments(\n    continuation?: string,\n    options: ListPathsSegmentOptions = {},\n  ): AsyncIterableIterator<FileSystemListPathsResponse> {\n    let response;\n    if (!!continuation || continuation === undefined) {\n      do {\n        response = await this.listPathsSegment(continuation, options);\n        continuation = response.continuation;\n        yield response;\n      } while (continuation);\n    }\n  }\n\n  private async listPathsSegment(\n    continuation?: string,\n    options: ListPathsSegmentOptions = {},\n  ): Promise<FileSystemListPathsResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-listPathsSegment\",\n      options,\n      async (updatedOptions) => {\n        const rawResponse = await this.fileSystemContext.listPaths(options.recursive || false, {\n          continuation,\n          ...updatedOptions,\n          upn: options.userPrincipalName,\n        });\n\n        const response = rawResponse as FileSystemListPathsResponse;\n        response.pathItems = [];\n        for (const path of rawResponse.paths || []) {\n          response.pathItems.push({\n            ...path,\n            permissions: toPermissions(path.permissions),\n            createdOn: windowsFileTimeTicksToTime(path.creationTime),\n            expiresOn: windowsFileTimeTicksToTime(path.expiryTime),\n          });\n        }\n        delete rawResponse.paths;\n\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the paths (directories and files)\n   * under the specified file system.\n   *\n   * .byPage() returns an async iterable iterator to list the paths in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```ts snippet:ReadmeSampleListDeletedPaths\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * const deletedPaths = fileSystemClient.listDeletedPaths();\n   * for await (const deletedPath of deletedPaths) {\n   *   console.log(`Deleted path ${i++}: ${deletedPath.name}, deleted on: ${deletedPath.deletedOn}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```ts snippet:ReadmeSampleListDeletedPaths_Iterator\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * const deletedPaths = fileSystemClient.listDeletedPaths();\n   * let { value, done } = await deletedPaths.next();\n   * while (!done) {\n   *   console.log(`Deleted path ${i++}: ${value.name}, deleted on: ${value.deletedOn}`);\n   *   ({ value, done } = await deletedPaths.next());\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```ts snippet:ReadmeSampleListDeletedPaths_ByPage\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * for await (const response of fileSystemClient.listDeletedPaths().byPage({ maxPageSize: 20 })) {\n   *   if (response.pathItems) {\n   *     for (const deletedPath of response.pathItems) {\n   *       console.log(`Deleted path ${i++}: ${deletedPath.name}, deleted on: ${deletedPath.deletedOn}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```ts snippet:ReadmeSampleListDeletedPaths_Continuation\n   * import { DataLakeServiceClient } from \"@azure/storage-file-datalake\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const account = \"<account>\";\n   * const datalakeServiceClient = new DataLakeServiceClient(\n   *   `https://${account}.dfs.core.windows.net`,\n   *   new DefaultAzureCredential(),\n   * );\n   *\n   * const fileSystemName = \"<file system name>\";\n   * const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n   *\n   * let i = 1;\n   * let deletedPaths = fileSystemClient.listDeletedPaths().byPage({ maxPageSize: 2 });\n   * let response = (await deletedPaths.next()).value;\n   * // Prints 2 deleted paths\n   * if (response.deletedPathItems) {\n   *   for (const deletedPath of response.deletedPathItems) {\n   *     console.log(`Deleted path ${i++}: ${deletedPath.name}, deleted on: ${deletedPath.deletedOn}`);\n   *   }\n   * }\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * deletedPaths = fileSystemClient\n   *   .listDeletedPaths()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await deletedPaths.next()).value;\n   * // Prints 10 deleted paths\n   * if (response.deletedPathItems) {\n   *   for (const deletedPath of response.deletedPathItems) {\n   *     console.log(`Deleted path ${i++}: ${deletedPath.name}, deleted on: ${deletedPath.deletedOn}`);\n   *   }\n   * }\n   * ```\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param options - Optional. Options when listing deleted paths.\n   */\n  public listDeletedPaths(\n    options: ListDeletedPathsOptions = {},\n  ): PagedAsyncIterableIterator<DeletedPath, FileSystemListDeletedPathsResponse> {\n    const iter = this.listDeletedItems(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        return this.listDeletedSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n  private async *listDeletedItems(\n    options: ListDeletedPathsOptions = {},\n  ): AsyncIterableIterator<DeletedPath> {\n    for await (const response of this.listDeletedSegments(undefined, options)) {\n      yield* response.pathItems || [];\n    }\n  }\n\n  private async *listDeletedSegments(\n    continuation?: string,\n    options: ListDeletedPathsSegmentOptions = {},\n  ): AsyncIterableIterator<FileSystemListDeletedPathsResponse> {\n    let response;\n    if (!!continuation || continuation === undefined) {\n      do {\n        response = await this.listDeletedPathsSegment(continuation, options);\n        continuation = response.continuation;\n        yield response;\n      } while (continuation);\n    }\n  }\n\n  private async listDeletedPathsSegment(\n    continuation?: string,\n    options: ListDeletedPathsSegmentOptions = {},\n  ): Promise<FileSystemListDeletedPathsResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-listDeletedPathsSegment\",\n      options,\n      async (updatedOptions) => {\n        const rawResponse = await this.fileSystemContextToBlobEndpoint.listBlobHierarchySegment({\n          marker: continuation,\n          ...updatedOptions,\n          prefix: options.prefix === \"\" ? undefined : options.prefix,\n        });\n\n        const response = rawResponse as FileSystemListDeletedPathsResponse;\n        response.pathItems = [];\n        for (const path of rawResponse.segment.blobItems || []) {\n          response.pathItems.push({\n            name: path.name,\n            deletionId: path.deletionId,\n            deletedOn: path.properties.deletedTime,\n            remainingRetentionDays: path.properties.remainingRetentionDays,\n          });\n        }\n\n        if (response.nextMarker) {\n          response.continuation = response.nextMarker;\n        }\n\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Restores a soft deleted path.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/undelete-blob\n   *\n   * @param deletedPath - Required.  The path of the deleted path.\n   *\n   * @param deletionId - Required.  The deletion ID associated with the soft deleted path.\n   *\n   */\n\n  public async undeletePath(\n    deletedPath: string,\n    deletionId: string,\n    options: FileSystemUndeletePathOption = {},\n  ): Promise<FileSystemUndeletePathResponse> {\n    return tracingClient.withSpan(\n      \"DataLakeFileSystemClient-undeletePath\",\n      options,\n      async (updatedOptions) => {\n        const pathClient = new PathClientInternal(\n          appendToURLPath(this.blobEndpointUrl, EscapePath(deletedPath)),\n          this.pipeline,\n        );\n\n        const rawResponse = assertResponse<PathUndeleteHeaders, PathUndeleteHeaders>(\n          await pathClient.blobPathContext.undelete({\n            undeleteSource: \"?\" + DeletionIdKey + \"=\" + deletionId,\n            ...options,\n            tracingOptions: updatedOptions.tracingOptions,\n          }),\n        );\n\n        if (rawResponse.resourceType === PathResultTypeConstants.DirectoryResourceType) {\n          return {\n            pathClient: this.getDirectoryClient(deletedPath),\n            ...rawResponse,\n          };\n        } else {\n          return {\n            pathClient: this.getFileClient(deletedPath),\n            ...rawResponse,\n          };\n        }\n      },\n    );\n  }\n\n  /**\n   * Only available for DataLakeFileSystemClient constructed with a shared key credential.\n   *\n   * Generates a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasUrl(options: FileSystemGenerateSasUrlOptions): Promise<string> {\n    return new Promise((resolve) => {\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw RangeError(\n          \"Can only generate the SAS when the client is initialized with a shared key credential\",\n        );\n      }\n\n      const sas = generateDataLakeSASQueryParameters(\n        {\n          fileSystemName: this.name,\n          ...options,\n        },\n        this.credential,\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n\n  /**\n   * Only available for DataLakeFileSystemClient constructed with a shared key credential.\n   *\n   * Generates string to sign for a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  public generateSasStringToSign(options: FileSystemGenerateSasUrlOptions): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the SAS when the client is initialized with a shared key credential\",\n      );\n    }\n\n    return generateDataLakeSASQueryParametersInternal(\n      {\n        fileSystemName: this.name,\n        ...options,\n      },\n      this.credential,\n    ).stringToSign;\n  }\n\n  /**\n   * Generates a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the input user delegation key.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @param userDelegationKey - Return value of `blobServiceClient.getUserDelegationKey()`\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateUserDelegationSasUrl(\n    options: FileSystemGenerateSasUrlOptions,\n    userDelegationKey: UserDelegationKey,\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const sas = generateDataLakeSASQueryParameters(\n        {\n          fileSystemName: this.name,\n          ...options,\n        },\n        userDelegationKey,\n        this.accountName,\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n\n  /**\n   * Generates string to sign for a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the input user delegation key.\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @param userDelegationKey - Return value of `blobServiceClient.getUserDelegationKey()`\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n\n  public generateUserDelegationSasStringToSign(\n    options: FileSystemGenerateSasUrlOptions,\n    userDelegationKey: UserDelegationKey,\n  ): string {\n    return generateDataLakeSASQueryParametersInternal(\n      {\n        fileSystemName: this.name,\n        ...options,\n      },\n      userDelegationKey,\n      this.accountName,\n    ).stringToSign;\n  }\n}\n"]}